import { AgentName } from "../../types";

/**
 * Validates the output of an agent based on its role.
 * This acts as a basic quality gate for the orchestrator.
 *
 * @param agentName - The name of the agent whose output is being checked.
 * @param output - The string output generated by the agent.
 * @returns `true` if the output is valid, `false` otherwise.
 */
export function validateAgentOutput(agentName: AgentName, output: string | null): boolean {
    if (!output || !output.trim()) {
        console.warn(`Validation failed for ${agentName}: Output is empty.`);
        return false;
    }

    switch (agentName) {
        case 'Coder':
        case 'Patcher':
            // For Coder and Patcher, the output MUST be a full HTML document.
            const trimmedOutput = output.trim().toLowerCase();
            const hasHtmlTag = trimmedOutput.includes('<html');
            const hasDoctype = trimmedOutput.includes('<!doctype html');
            if (!hasHtmlTag || !hasDoctype) {
                console.warn(`Validation failed for ${agentName}: Output is not a valid HTML document.`);
                return false;
            }
            return true;

        case 'UX/UI Designer':
            // Must contain CSS and a data URI for the favicon.
            const hasCss = output.includes('```css');
            const hasFavicon = output.includes('data:image/');
             if (!hasCss || !hasFavicon) {
                console.warn(`Validation failed for ${agentName}: Missing CSS or favicon data URI.`);
                return false;
            }
            return true;

        // For other agents, a non-empty output is sufficient for now.
        // More complex validation could be added here (e.g., JSON schema validation).
        case 'Planner':
        case 'Architect':
        case 'Reviewer':
        case 'Deployer':
        default:
            return true;
    }
}
