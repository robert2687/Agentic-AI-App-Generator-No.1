import { AgentName } from "../../types";

/**
 * Validates the output of an agent based on its role.
 * This acts as a quality gate for the orchestrator.
 *
 * @param agentName - The name of the agent whose output is being checked.
 * @param output - The string output generated by the agent.
 * @returns An object with `valid: boolean` and an optional `reason` for failure.
 */
export function validateAgentOutput(agentName: AgentName, output: string | null): { valid: boolean; reason?: string } {
    if (!output || !output.trim()) {
        return { valid: false, reason: "Output is empty or only contains whitespace." };
    }

    switch (agentName) {
        case 'Coder':
        case 'Patcher': {
            const trimmedOutput = output.trim();
            const checks = [
                { pass: trimmedOutput.toLowerCase().includes('<!doctype html'), failReason: "Missing <!doctype html> declaration." },
                { pass: trimmedOutput.toLowerCase().includes('<html'), failReason: "Missing <html> tag." },
                { pass: trimmedOutput.toLowerCase().includes('<body'), failReason: "Missing <body> tag." },
                { pass: /<label[^>]+for=/i.test(trimmedOutput) || /aria-label=/i.test(trimmedOutput), failReason: "Missing accessibility attributes. Use <label for='...'> for inputs or aria-label for interactive elements without text." }
            ];
            
            for (const check of checks) {
                if (!check.pass) {
                    return { valid: false, reason: check.failReason };
                }
            }
            return { valid: true };
        }

        case 'UX/UI Designer': {
            const checks = [
                { pass: output.includes('```css'), failReason: "Missing ```css code block for the stylesheet." },
                { pass: output.includes('data:image/'), failReason: "Missing a data URI for the favicon or logo." },
                { pass: output.includes(':root'), failReason: "Missing the :root pseudo-class for CSS variable definitions." },
                { pass: output.includes('var(--'), failReason: "CSS variables were defined but never used with var()." }
            ];

            for (const check of checks) {
                if (!check.pass) {
                    return { valid: false, reason: check.failReason };
                }
            }
            return { valid: true };
        }

        // For other agents, a non-empty output is sufficient for now.
        // More complex validation could be added here (e.g., JSON schema validation).
        case 'Planner':
        case 'Architect':
        case 'Reviewer':
        case 'Deployer':
        default:
            return { valid: true };
    }
}
