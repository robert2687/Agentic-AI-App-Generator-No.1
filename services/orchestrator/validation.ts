import { AgentName } from "../../types";
import { validateCssOutput } from "./cssValidator";

/**
 * Validates the output of an agent based on its role.
 * This acts as a quality gate for the orchestrator.
 *
 * @param agentName - The name of the agent whose output is being checked.
 * @param output - The string output generated by the agent.
 * @returns An object with `valid: boolean` and an optional `reason` for failure.
 */
export function validateAgentOutput(agentName: AgentName, output: string | null): { valid: boolean; reason?: string } {
    if (!output || !output.trim()) {
        return { valid: false, reason: "Output is empty or only contains whitespace." };
    }

    switch (agentName) {
        case 'Coder':
        case 'Patcher': {
            const trimmedOutput = output.trim();
            const checks = [
                { pass: trimmedOutput.toLowerCase().includes('<!doctype html'), failReason: "Missing <!doctype html> declaration." },
                { pass: trimmedOutput.toLowerCase().includes('<html'), failReason: "Missing <html> tag." },
                { pass: trimmedOutput.toLowerCase().includes('<body'), failReason: "Missing <body> tag." },
                { pass: /<label[^>]+for=/i.test(trimmedOutput) || /aria-label=/i.test(trimmedOutput), failReason: "Missing accessibility attributes. Use <label for='...'> for inputs or aria-label for interactive elements without text." }
            ];
            
            for (const check of checks) {
                if (!check.pass) {
                    return { valid: false, reason: check.failReason };
                }
            }
            return { valid: true };
        }

        case 'UX/UI Designer': {
            // General structural checks for the agent's output format.
            if (!output.includes('data:image/')) {
                return { valid: false, reason: "Missing a data URI for the favicon or logo." };
            }
            if (!output.includes('```css')) {
                return { valid: false, reason: "Missing ```css code block for the stylesheet." };
            }

            // Extract CSS content for detailed validation.
            const cssBlockMatch = output.match(/```css\n([\s\S]*?)```/);
            if (!cssBlockMatch || !cssBlockMatch[1] || !cssBlockMatch[1].trim()) {
                return { valid: false, reason: "A valid CSS code block with content was not found. Ensure it starts with ```css followed by a newline." };
            }

            const cssContent = cssBlockMatch[1];
            const cssErrors = validateCssOutput(cssContent);

            if (cssErrors.length > 0) {
                // Return the first, most actionable error to the orchestrator.
                return { valid: false, reason: `CSS validation failed: ${cssErrors[0]}` };
            }
            
            return { valid: true };
        }

        // For other agents, a non-empty output is sufficient for now.
        // More complex validation could be added here (e.g., JSON schema validation).
        case 'Planner':
        case 'Architect':
        case 'Reviewer':
        case 'Deployer':
        default:
            return { valid: true };
    }
}
